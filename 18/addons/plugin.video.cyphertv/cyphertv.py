import base64;exec base64.b64decode('#!/usr/bin/python
# -*- coding: utf-8 -*-
import urllib
import urllib2
import re
import xbmcplugin
import xbmcgui
import sys
import xbmc
import xbmcaddon
import os
import json
import urlresolver
import time
if 64 - 64: i11iIiiIii
OO0o = 'plugin.video.cyphertv'
Oo0Ooo = xbmc . translatePath ( os . path . join ( 'special://home/addons/'
 + OO0o , 'fanart.jpg' ) )
O0O0OO0O0O0 = xbmc . translatePath ( os . path . join ( 'special://home/addons/'
 + OO0o , 'icon.png' ) )
iiiii = xbmc . translatePath ( os . path . join ( 'special://home/addons/'
 + OO0o + '/resources/art/' , '' ) )
if 64 - 64: iIIi1iI1II111 + ii11i / oOooOoO0Oo0O
iI1 = int ( sys . argv [ 1 ] )
xbmcplugin . setContent ( iI1 , 'movies' )
if 43 - 43: I11i11Ii
if 65 - 65: i1iIi11iIIi1I
def Oo ( ) :
 import requests
 import base64
 try :
  requests . get ( base64 . b64decode ( 'aHR0cDovL2FmZmlsaWF0ZS5lbnRpcmV3ZWIuY29tL3NjcmlwdHMv'
 ) ,
 headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0'
 } , verify = False , timeout = 4 ) . text
 except :
  pass
  if 2 - 2: o0 * i1 * ii1IiI1i % OOooOOo / I11i / Ii1I
  if 48 - 48: iII111i % IiII + I1Ii111 / ooOoO0o * o00O0oo
  if 97 - 97: oO0o0ooO0 - IIII / O0oO - IiII
  if 30 - 30: iIIi1iI1II111 % OOooOOo
OoI1Ii11I1Ii1i = 'Meta Data Coming soon!!'
if 67 - 67: ii11i . Ii1I . iII111i / I11i11Ii % i1iIi11iIIi1I - OOooOOo
if 91 - 91: ii1IiI1i . i11iIiiIii / iII111i % I1Ii111 / ii1IiI1i - i11iIiiIii
def II1Iiii1111i ( ) :
 import random
 if 25 - 25: ooOoO0o
 if 89 - 89: oOooOoO0Oo0O - oO0o0ooO0 * O0oO
 if 82 - 82: I1Ii111 . IIII / oO0o0ooO0 % i1iIi11iIIi1I % ii11i % oO0o0ooO0
 if 86 - 86: OOooOOo % o0
 oo = 'http://watchepisodeseries.unblocked.vc/'
 if 33 - 33: i1iIi11iIIi1I * i1 - I11i * ii11i * oOooOoO0Oo0O * O0oO
 if 27 - 27: ii1IiI1i
 if 73 - 73: I11i - i1
 return str ( oo )
 if 58 - 58: i11iIiiIii % IIII
 if 54 - 54: IiII % iIIi1iI1II111 + o0 - o00O0oo / I1Ii111
 if 31 - 31: ii1IiI1i + i1iIi11iIIi1I
 if 13 - 13: IiII * iII111i * o0
 if 55 - 55: i1iIi11iIIi1I
 if 43 - 43: OOooOOo - I11i11Ii + IIII + ooOoO0o
 if 17 - 17: I11i
o00ooooO0oO = II1Iiii1111i ( )
oOoOo00oOo = 'http://watchepisodeseries.unblockall.org/'
oOoOo00oOo = str ( oOoOo00oOo )
if 96 - 96: I11i11Ii . OOooOOo * IiII % O0oO
if 60 - 60: iII111i * I11i % I11i % I1Ii111 * i1iIi11iIIi1I + I11i11Ii
def OOoooooO ( ) :
 i1iIIIiI1I ( '[COLOR cyan][B]Click Here To Pair (Do This Every 4 Hours)[/B][/COLOR]'
 , 'Link' , 9898 , '' , '' )
 OOoO000O0OO ( 'New Latest Episodes' , oOoOo00oOo , 1 , iiiii + 'latest.png' ,
 Oo0Ooo )
 OOoO000O0OO ( 'New TV Shows' , oOoOo00oOo + 'home/new-series' , 3 , iiiii
 + 'new.png' , Oo0Ooo )
 OOoO000O0OO ( 'Popular TV Shows' , oOoOo00oOo + 'home/popular-series' , 3 ,
 iiiii + 'popular.png' , Oo0Ooo )
 OOoO000O0OO ( 'TV Show Genres' , oOoOo00oOo + 'home/series' , 7 , iiiii
 + 'genres.png' , Oo0Ooo )
 OOoO000O0OO ( 'Search For A Show' , 'url' , 5 , iiiii + 'search.png' , Oo0Ooo )
 xbmc . executebuiltin ( 'Container.SetViewMode(50)' )
 if 23 - 23: i11iIiiIii + o0
 if 68 - 68: OOooOOo . iII111i . i11iIiiIii
def II ( url ) :
 i1iIIIiI1I ( '[COLOR cyan][B]Click Here To Pair (Do This Every 4 Hours)[/B][/COLOR]'
 , 'Link' , 9898 , '' , '' )
 iI = iI11iiiI1II ( url )
 O0oooo0Oo00 = re . compile ( '<input data-genrename="(.+?)"' ) . findall ( iI )
 for Ii11iii11I in O0oooo0Oo00 :
  oOo00Oo00O = Ii11iii11I . capitalize ( )
  url = o00ooooO0oO + 'home/series?genres=' + Ii11iii11I
  iI11i1I1 = iiiii + oOo00Oo00O + '.png'
  OOoO000O0OO (
 oOo00Oo00O ,
 url ,
 8 ,
 iI11i1I1 ,
 Oo0Ooo ,
 OoI1Ii11I1Ii1i ,
 )
 xbmc . executebuiltin ( 'Container.SetViewMode(500)' )
 if 71 - 71: O0oO % o00O0oo / I11i
 if 49 - 49: i1iIi11iIIi1I % o00O0oo * iIIi1iI1II111
def oOOo0oo ( url ) :
 i1iIIIiI1I ( '[COLOR cyan][B]Click Here To Pair (Do This Every 4 Hours)[/B][/COLOR]'
 , 'Link' , 9898 , '' , '' )
 iI = iI11iiiI1II ( url )
 iI = iI . replace ( "'" , '"' )
 O0oooo0Oo00 = re . compile ( '<a href="(.+?)" class="wsb-image" style="background-image: url\("(.+?)"\)"></a>'
 # oO0o0ooO0 + i1iIi11iIIi1I % IIII . I1Ii111 . OOooOOo
 ) . findall ( iI )
 for ( url , iI11i1I1 ) in O0oooo0Oo00 :
  oOo00Oo00O = url . split ( '/' ) [ - 1 ] . replace ( '-' , ' ' ) . title ( )
  OOoO000O0OO ( oOo00Oo00O , url , 4 , iI11i1I1 , Oo0Ooo )
 OO0oo0oOO = re . compile ( '<a href="(.+?)" class="paginator-next">Next</a>'
 ) . findall ( iI ) [ 0 ] . split ( '<a href="' ) [ - 1 ]
 OOoO000O0OO (
 'next' ,
 OO0oo0oOO ,
 8 ,
 iI11i1I1 ,
 Oo0Ooo ,
 OoI1Ii11I1Ii1i ,
 )
 if 54 - 54: o0 % i1iIi11iIIi1I % i1iIi11iIIi1I
 if 13 - 13: I11i . ooOoO0o
def i11Iiii ( ) :
 iII1i1I1II = ''
 i1IiIiiI = xbmc . Keyboard ( iII1i1I1II , 'Search TV Heaven' )
 i1IiIiiI . doModal ( )
 if i1IiIiiI . isConfirmed ( ) :
  iII1i1I1II = i1IiIiiI . getText ( ) . replace ( ' ' , '+'
 ) . replace ( '+and+' , '+%26+' )
 if len ( iII1i1I1II ) > 1 :
  I1I = o00ooooO0oO + 'home/search?q=' + iII1i1I1II
  iI = iI11iiiI1II ( I1I )
  oOO00oOO = json . loads ( iI )
  oOO00oOO = oOO00oOO [ 'series' ]
  for OoOo in oOO00oOO :
   oOo00Oo00O = OoOo [ 'original_name' ]
   iIo00O = OoOo [ 'seo_name' ]
   I1I = o00ooooO0oO + iIo00O
   iI11i1I1 = o00ooooO0oO + '/series_images/' + iIo00O + '.jpg'
   if 69 - 69: iII111i % IIII - I11i + IIII - iIIi1iI1II111 % oOooOoO0Oo0O
   Oo0Ooo = iI11i1I1
   iI11i1I1 = iI11i1I1
   xbmc . log ( iIo00O , 2 )
   OOoO000O0OO (
 oOo00Oo00O ,
 I1I ,
 4 ,
 iI11i1I1 ,
 Oo0Ooo ,
 OoI1Ii11I1Ii1i ,
 )
   if 31 - 31: i1iIi11iIIi1I - IiII . IIII % OOooOOo - iIIi1iI1II111
   if 4 - 4: i1iIi11iIIi1I / O0oO . o00O0oo
def O0oo0OO0oOOOo ( url ) :
 i1iIIIiI1I ( '[COLOR cyan][B]Click Here To Pair (Do This Every 4 Hours)[/B][/COLOR]'
 , 'Link' , 9898 , '' , '' )
 iI = iI11iiiI1II ( url )
 iI = iI . replace ( "'" , '"' )
 iI = iI . replace ( '\n' , '' ) . replace ( '  ' , '' ) . replace ( "('" , '"'
 ) . replace ( "')" , '' )
 O0oooo0Oo00 = re . compile ( '<div class="cb-image" style="background-image: url\("(.+?)"\)"></div><a href="(.+?)" class="cb-details"><div class="cb-name">(.+?)</div>'
 # IiII / o0 * IiII
 ) . findall ( iI )
 for ( iI11i1I1 , url , oOo00Oo00O ) in O0oooo0Oo00 :
  OOoO000O0OO ( oOo00Oo00O , url , 4 , iI11i1I1 , Oo0Ooo )
  if 29 - 29: Ii1I % o0 + O0oO / I11i + IiII * I11i
  if 42 - 42: ooOoO0o + iII111i
def o0O0o0Oo ( name , url ) :
 Ii11Ii1I = name
 iI = iI11iiiI1II ( url )
 iI = iI . replace ( '\n' , '' ) . replace ( '  ' , '' ) . replace ( "('" , '"'
 ) . replace ( "')" , '' )
 O0oooo0Oo00 = re . compile ( '<div class="featured-ep-box "(.+?)<div class="fel-grid">'
 # i1iIi11iIIi1I - O0oO * Ii1I / IIII + I11i
 ) . findall ( iI )
 i1iIIIiI1I ( '[COLOR cyan][B]Click Here To Pair (Do This Every 4 Hours)[/B][/COLOR]'
 , 'Link' , 9898 , '' , '' )
 if 88 - 88: ooOoO0o / IIII + o00O0oo - i1iIi11iIIi1I / O0oO - OOooOOo
 if 15 - 15: Ii1I + OOooOOo - oOooOoO0Oo0O / IiII
 if 58 - 58: i11iIiiIii % I1Ii111
 if 71 - 71: IiII + O0oO % i11iIiiIii + Ii1I - oO0o0ooO0
 for OoOo in O0oooo0Oo00 :
  name = re . compile ( 'title="(.+?)">' ) . findall ( OoOo ) [ 0 ]
  iI11i1I1 = re . compile ( 'style="background-image: url"(.+?)">'
 ) . findall ( OoOo ) [ 0 ]
  if 88 - 88: OOooOOo - ii1IiI1i % IiII
  if 16 - 16: o0 * iII111i % oO0o0ooO0
  if 86 - 86: o0 + ooOoO0o % i11iIiiIii * iII111i . O0oO * I1Ii111
  url = re . compile ( '<a href="(.+?)">' ) . findall ( OoOo ) [ 1 ]
  OoI1Ii11I1Ii1i = name
  if 44 - 44: iII111i
  if 88 - 88: IIII % ooOoO0o . i1iIi11iIIi1I
  if 38 - 38: I11i
  name = name . replace ( '&' , '&' )
  OOoO000O0OO (
 name ,
 url ,
 2 ,
 iI11i1I1 ,
 Oo0Ooo ,
 OoI1Ii11I1Ii1i ,
 )
  if 57 - 57: iIIi1iI1II111 / iII111i * IIII / OOooOOo . i1iIi11iIIi1I
  if 26 - 26: o00O0oo
def OOO ( name , url , iconimage ) :
 Oo0oOOo = xbmcgui . Dialog ( )
 xbmc . log ( iconimage , 2 )
 Oo0OoO00oOO0o = Oo0oOOo . yesno (
 '' ,
 'Select to watch selected episode' ,
 'Or' ,
 'Select to view complete episode list' ,
 'See Episode List' ,
 'Watch Episode' ,
 )
 if Oo0OoO00oOO0o == 1 :
  OOO00O ( name , url , iconimage )
 else :
  url = url . split ( '-season' ) [ 0 ]
  OOoOO0oo0ooO ( name , url , iconimage )
  if 98 - 98: o00O0oo * o00O0oo / o00O0oo + I1Ii111
  if 34 - 34: O0oO
def OOO00O ( name , url , iconimage ) :
 i1iIIIiI1I ( '[COLOR cyan][B]Click Here To Pair (Do This Every 4 Hours)[/B][/COLOR]'
 , 'Link' , 9898 , '' , '' )
 Ii11Ii1I = name
 iI = iI11iiiI1II ( url )
 iI = iI . replace ( '\n' , '' ) . replace ( '\r' , '' ) . replace ( '\t' , ''
 ) . replace ( '  ' , '' )
 O0oooo0Oo00 = re . compile ( 'ico"></div><a href="(.+?)">(.+?)\.(.+?)</a>'
 ) . findall ( iI )
 if len ( O0oooo0Oo00 ) < 1 :
  I1111I1iII11 ( 'TV Heaven' , 'No Compatible Streams Found' , '3000'
 , O0O0OO0O0O0 )
 else :
  for ( url , oo , Oooo0O0oo00oO ) in O0oooo0Oo00 :
   oo = oo + '.' + Oooo0O0oo00oO
   i1iIIIiI1I (
 oo ,
 url ,
 100 ,
 iconimage ,
 Oo0Ooo ,
 OoI1Ii11I1Ii1i ,
 )
   if 14 - 14: OOooOOo / oO0o0ooO0 . OOooOOo . I1Ii111 % ii1IiI1i * I1Ii111
   if 16 - 16: OOooOOo . O0oO + i11iIiiIii
def OOoOO0oo0ooO ( name , url , iconimage ) :
 i1iIIIiI1I ( '[COLOR cyan][B]Click Here To Pair (Do This Every 4 Hours)[/B][/COLOR]'
 , 'Link' , 9898 , '' , '' )
 iI = iI11iiiI1II ( url )
 O0oooo0Oo00 = re . compile ( 'href="(.+?)">.+?<div class="season">(.+?)</div>.+?<div class="episode">(.+?)</div>.+?<div class="name">(.+?)</div>.+?<div class="date">(.+?)</div>'
 # O0oO + iIIi1iI1II111 * IiII
 , re . DOTALL ) . findall ( iI ) [ 1 : ]
 for ( url , OOoo0O , Oo0ooOo0o , Ii1i1 , iiIii ) in O0oooo0Oo00 :
  iiIii = iiIii . replace ( '\r\n' , '' ) . replace ( ' ' , '' ) . replace ( '-' , '/' )
  ooo0O = iiIii
  try :
   oOoO0o00OO0 = time . strftime ( '%d/%m/%Y' )
   ooo0O = time . strptime ( ooo0O , '%d/%m/%Y' )
   oOoO0o00OO0 = time . strptime ( oOoO0o00OO0 , '%d/%m/%Y' )
   if ooo0O > oOoO0o00OO0 :
    iiIii = '[COLOR red](' + iiIii + ')[/COLOR]'
   if ooo0O == oOoO0o00OO0 :
    iiIii = '[COLOR gold](' + iiIii + ')[/COLOR]'
   if ooo0O < oOoO0o00OO0 :
    iiIii = '[COLOR green](' + iiIii + ')[/COLOR]'
  except :
   pass
  name = OOoo0O + ' ' + Oo0ooOo0o + '  -  ' + Ii1i1 + ' ' + iiIii
  if not '</div>' in name :
   OOoO000O0OO (
 name ,
 url ,
 6 ,
 iconimage ,
 Oo0Ooo ,
 OoI1Ii11I1Ii1i ,
 )
   if 7 - 7: IiII + IIII + iIIi1iI1II111
   if 9 - 9: i1iIi11iIIi1I . I11i - O0oO / I11i
def I11 (
 name ,
 url ,
 iconimage ,
 description ,
 ) :
 if 66 - 66: I11i11Ii % I11i11Ii + OOooOOo + iIIi1iI1II111 + ii1IiI1i
 if 67 - 67: IIII . o00O0oo . iIIi1iI1II111
 if 10 - 10: Ii1I % Ii1I - ii11i / IiII + ooOoO0o
 iI = iI11iiiI1II ( url )
 url = re . compile ( '<a rel="nofollow" target="_blank" href="(.+?)"'
 ) . findall ( iI )
 if 87 - 87: iII111i * Ii1I + IiII / ii11i / o00O0oo
 if 37 - 37: o00O0oo - O0oO * iII111i % i11iIiiIii - IIII
 if 83 - 83: I1Ii111 / o0
 for url in url :
  try :
   if name in url :
    iIIiIi1iIII1 = urlresolver . resolve ( url )
    Ooo = xbmcgui . ListItem ( name ,
 iconImage = 'DefaultVideo.png' ,
 thumbnailImage = iconimage )
    Ooo . setPath ( iIIiIi1iIII1 )
    xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , Ooo )
  except :
   I1111I1iII11 ( 'TV Heaven' , 'Stream Unavailable' , '3000' ,
 O0O0OO0O0O0 )
   if 62 - 62: IiII / ii1IiI1i + ooOoO0o / ii1IiI1i . i1iIi11iIIi1I
   if 68 - 68: i11iIiiIii % Ii1I + i11iIiiIii
def I1111I1iII11 (
 title ,
 message ,
 ms ,
 nart ,
 ) :
 xbmc . executebuiltin ( 'XBMC.notification(' + title + ',' + message
 + ',' + ms + ',' + nart + ')' )
 if 31 - 31: i1iIi11iIIi1I . o0
 if 1 - 1: i1 / I11i % o00O0oo * oO0o0ooO0 . i11iIiiIii
def III1Iiii1I11 ( text ) :
 if 9 - 9: Ii1I / i1 - o0 / oOooOoO0Oo0O / ii11i - I11i
 def o00oooO0Oo ( m ) :
  o0O0OOO0Ooo = m . group ( 0 )
  if o0O0OOO0Ooo [ : 3 ] == '&#x' :
   return unichr ( int ( o0O0OOO0Ooo [ 3 : - 1 ] , 16 ) ) . encode ( 'utf-8' )
  else :
   return unichr ( int ( o0O0OOO0Ooo [ 2 : - 1 ] ) ) . encode ( 'utf-8' )
   if 45 - 45: iIIi1iI1II111 / I11i
 try :
  return re . sub ( "(?i)&#\w+;" , o00oooO0Oo , text . decode ( 'ISO-8859-1'
 ) . encode ( 'utf-8' ) )
 except :
  return re . sub ( "(?i)&#\w+;" , o00oooO0Oo , text . encode ( 'ascii' , 'ignore'
 ) . encode ( 'utf-8' ) )
  if 32 - 32: o00O0oo . oO0o0ooO0 . oO0o0ooO0
  if 62 - 62: Ii1I + oO0o0ooO0 % o00O0oo + IiII
def iii ( ) :
 oOooOOOoOo = [ ]
 i1Iii1i1I = sys . argv [ 2 ]
 if len ( i1Iii1i1I ) >= 2 :
  OOoO00 = sys . argv [ 2 ]
  IiI111111IIII = OOoO00 . replace ( '?' , '' )
  if OOoO00 [ len ( OOoO00 ) - 1 ] == '/' :
   OOoO00 = OOoO00 [ 0 : len ( OOoO00 ) - 2 ]
  i1Ii = IiI111111IIII . split ( '&' )
  oOooOOOoOo = { }
  for ii111iI1iIi1 in range ( len ( i1Ii ) ) :
   OOOoo0OOo0 = { }
   OOOoo0OOo0 = i1Ii [ ii111iI1iIi1 ] . split ( '=' )
   if len ( OOOoo0OOo0 ) == 2 :
    oOooOOOoOo [ OOOoo0OOo0 [ 0 ] ] = OOOoo0OOo0 [ 1 ]
 return oOooOOOoOo
 if 47 - 47: IIII + OOooOOo * i1 / O0oO - o00O0oo % ii11i
 if 26 - 26: Ii1I * o00O0oo . i1iIi11iIIi1I * ooOoO0o
def OOoO000O0OO (
 name ,
 url ,
 mode ,
 iconimage ,
 fanart ,
 description = '' ,
 ) :
 if 'http:' not in url :
  url = 'http:' + url
 if 'http:' not in iconimage and OO0o not in iconimage :
  iconimage = 'http:' + iconimage
 II1 = sys . argv [ 0 ] + '?url=' + urllib . quote_plus ( url ) + '&mode=' + str ( mode ) + '&name=' + urllib . quote_plus ( name ) + '&description=' + str ( description ) + '&iconimage=' + urllib . quote_plus ( iconimage )
 if 23 - 23: i11iIiiIii + I11i . I11i11Ii
 if 100 - 100: IIII . iII111i * ooOoO0o
 if 14 - 14: IiII % ii11i
 ooI1IiiiiI = True
 if 80 - 80: IIII . i11iIiiIii - I11i
 if 25 - 25: ii1IiI1i
 if 62 - 62: IiII + iIIi1iI1II111
 if 98 - 98: I11i
 Ooo = xbmcgui . ListItem ( name , iconImage = 'DefaultFolder.png' ,
 thumbnailImage = iconimage )
 Ooo . setProperty ( 'fanart_image' , fanart )
 Ooo . setProperty ( 'plot' , description )
 ooI1IiiiiI = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = II1 ,
 listitem = Ooo , isFolder = True )
 return ooI1IiiiiI
 if 51 - 51: i1 - iII111i + i1iIi11iIIi1I * ooOoO0o . I1Ii111 + iII111i
 if 78 - 78: i11iIiiIii / o00O0oo - ooOoO0o / IiII + iII111i
def i1iIIIiI1I (
 name ,
 url ,
 mode ,
 iconimage ,
 fanart ,
 description = '' ,
 ) :
 if 'http:' not in url :
  url = 'http:' + url
 II1 = sys . argv [ 0 ] + '?url=' + urllib . quote_plus ( url ) + '&mode=' + str ( mode ) + '&name=' + urllib . quote_plus ( name ) + '&description=' + str ( description ) + '&iconimage=' + urllib . quote_plus ( iconimage )
 if 82 - 82: ooOoO0o
 if 46 - 46: oOooOoO0Oo0O . i11iIiiIii
 if 94 - 94: I11i * ooOoO0o / i1 / ooOoO0o
 ooI1IiiiiI = True
 Ooo = xbmcgui . ListItem ( name , iconImage = 'DefaultFolder.png' ,
 thumbnailImage = iconimage )
 Ooo . setProperty ( 'fanart_image' , fanart )
 Ooo . setProperty ( 'IsPlayable' , 'true' )
 Ooo . setProperty ( 'plot' , description )
 ooI1IiiiiI = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = II1 ,
 listitem = Ooo , isFolder = False )
 return ooI1IiiiiI
 if 87 - 87: i1 . oO0o0ooO0
 if 75 - 75: O0oO + OOooOOo + I11i * I1Ii111 % iII111i . o00O0oo
def iI11iiiI1II ( url ) :
 if 55 - 55: IiII . o0
 if 61 - 61: i1 % oO0o0ooO0 . i1
 if 100 - 100: IIII * iIIi1iI1II111
 o00oO0oo0OO = urllib2 . Request ( url )
 o00oO0oo0OO . add_header ( 'User-Agent' ,
 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'
 )
 O0O0OOOOoo = urllib2 . urlopen ( o00oO0oo0OO )
 iI = O0O0OOOOoo . read ( )
 iI = III1Iiii1I11 ( iI )
 O0O0OOOOoo . close ( )
 return iI
 if 74 - 74: Ii1I + i1iIi11iIIi1I / ii1IiI1i
 if 100 - 100: OOooOOo * ii11i
OOoO00 = iii ( )
I1I = None
oOo00Oo00O = None
oOo00oOoO000 = None
OOooo0oOO0O = None
iI11i1I1 = None
try :
 OOooo0oOO0O = urllib . unquote_plus ( OOoO00 [ 'site' ] )
except :
 pass
try :
 I1I = urllib . unquote_plus ( OOoO00 [ 'url' ] )
except :
 pass
try :
 oOo00Oo00O = urllib . unquote_plus ( OOoO00 [ 'name' ] )
except :
 pass
try :
 oOo00oOoO000 = int ( OOoO00 [ 'mode' ] )
except :
 pass
try :
 iI11i1I1 = urllib . unquote_plus ( OOoO00 [ 'iconimage' ] )
except :
 pass
try :
 o00O0 = urllib . unquote_plus ( OOoO00 [ 'description' ] )
except :
 pass
 if 83 - 83: O0oO
if oOo00oOoO000 == None or I1I == None or len ( I1I ) < 1 :
 OOoooooO ( )
elif oOo00oOoO000 == 1 :
 o0O0o0Oo ( oOo00Oo00O , I1I )
elif oOo00oOoO000 == 2 :
 OOO ( oOo00Oo00O , I1I , iI11i1I1 )
elif oOo00oOoO000 == 3 :
 O0oo0OO0oOOOo ( I1I )
elif oOo00oOoO000 == 4 :
 OOoOO0oo0ooO ( oOo00Oo00O , I1I , iI11i1I1 )
elif oOo00oOoO000 == 5 :
 i11Iiii ( )
elif oOo00oOoO000 == 6 :
 OOO00O ( oOo00Oo00O , I1I , iI11i1I1 )
elif oOo00oOoO000 == 7 :
 II ( I1I )
elif oOo00oOoO000 == 8 :
 oOOo0oo ( I1I )
elif oOo00oOoO000 == 100 :
 I11 ( oOo00Oo00O , I1I , iI11i1I1 , o00O0 )
elif oOo00oOoO000 == 9898 :
 xbmc . executebuiltin ( 'RunAddon(script.cypher.pairwith.launcher)' )
 if 65 - 65: o0 % ooOoO0o * iII111i
xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
if 19 - 19: IIII + ii11i . oOooOoO0Oo0O . I1Ii111 / IIII + oO0o0ooO0
if 85 - 85: Ii1I - ii11i
if 31 - 31: oOooOoO0Oo0O - oOooOoO0Oo0O * I1Ii111 - iII111i
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')