import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import urllib2 , urllib , xbmcgui , xbmcplugin , xbmc , re , sys , xbmcaddon , base64
if 64 - 64: i11iIiiIii
from addon . common . addon import Addon
from md_request import open_url
from metahandler import metahandlers
import urlresolver
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
o0OO00 = 'plugin.video.cyphermovie'
oo = xbmcaddon . Addon ( id = o0OO00 )
i1iII1IiiIiI1 = Addon ( o0OO00 , sys . argv )
iIiiiI1IiI1I1 = oo . getAddonInfo ( 'name' )
o0OoOoOO00 = xbmcaddon . Addon ( )
I11i = o0OoOoOO00 . getAddonInfo ( 'path' )
O0O = o0OoOoOO00 . getAddonInfo ( 'icon' )
Oo = o0OoOoOO00 . getAddonInfo ( 'fanart' )
I1ii11iIi11i = 'cyphermovie'
I1IiI = o0OoOoOO00 . getAddonInfo ( 'version' )
o0OOO = I11i + "/resources/icons/"
iIiiiI = 'http://fullmovies24.net'
Iii1ii1II11i = oo . getSetting ( 'enable_meta' )
iI111iI = metahandlers . MetaData ( )
if 34 - 34: iii1I1I / O00oOoOoO0o0O . O0oo0OO0 + Oo0ooO0oo0oO . I1i1iI1i - II
def OoI1Ii11I1Ii1i ( ) :
 Ooo = open_url ( iIiiiI ) . content
 o0oOoO00o = re . compile ( 'id="foxmenucontainer">(.+?)</ul>' , re . DOTALL ) . findall ( Ooo )
 i1 = re . compile ( 'href="(.+?)">(.+?)</a>' , re . DOTALL ) . findall ( str ( o0oOoO00o ) )
 for oOOoo00O0O , i1111 in i1 :
  if '/contact/' not in oOOoo00O0O :
   if 'Home' in i1111 :
    i1111 = i1111 . replace ( 'Home' , 'All Movies' )
    i11 = O0O
   else :
    i11 = o0OOO + 'genres.jpg'
   I11 ( '[B][COLOR white]%s[/COLOR][/B]' % i1111 , oOOoo00O0O , 5 , i11 , Oo , '' )
 I11 ( '[B][COLOR white]Search[/COLOR][/B]' , 'url' , 6 , o0OOO + 'search.jpg' , Oo , '' )
 xbmc . executebuiltin ( 'Container.SetViewMode(50)' )
 if 98 - 98: I1111 * o0o0Oo0oooo0 / I1I1i1 * oO0 / IIIi1i1I
def OOoOoo00oo ( url ) :
 Ooo = open_url ( url ) . content
 o0oOoO00o = re . compile ( '<img class="poster" src="(.+?)".+?href="(.+?)".+?>(.+?)</a>' , re . DOTALL ) . findall ( Ooo )
 for i11 , url , i1111 in o0oOoO00o :
  iiI11 = len ( o0oOoO00o )
  i11 = i11 . replace ( 'amp;' , '' )
  i1111 = i1111 . replace ( '&#8217;' , "'" ) . replace ( ' HD' , '' ) . replace ( '&#039;' , '\'' ) . replace ( '&#8230;' , '' )
  if Iii1ii1II11i == 'true' :
   OOooO ( '[B][COLOR white]%s[/COLOR][/B]' % i1111 , url , 100 , i11 , iiI11 )
  else :
   I11 ( '[B][COLOR white]%s[/COLOR][/B]' % i1111 , url , 100 , i11 , Oo , '' )
 OOoO00o = re . compile ( 'rel="next".+?rel="next" href="(.+?)"' , re . DOTALL ) . findall ( Ooo )
 for url in OOoO00o :
  I11 ( '[B][COLOR cyan]Next Page>>>[/COLOR][/B]' , url , 5 , o0OOO + 'nextpage.jpg' , Oo , '' )
 II111iiii ( 'movies' , 'movie-view' )
 if 48 - 48: I1Ii . IiIi1Iii1I1 - O0O0O0O00OooO % Ooooo % iIii1I11I1II1 - i1IIi
 if 70 - 70: Oo0ooO0oo0oO . Oo0ooO0oo0oO - Oo0ooO0oo0oO / I1111 * I1I1i1
 if 86 - 86: i11iIiiIii + IIIi1i1I + Ooooo * oO0 + II
def oOoO ( url ) :
 Ooo = open_url ( url ) . content
 o0oOoO00o = re . compile ( '<h3>Movies</h3>(.+?)<h3>TV Shows</h3>' , re . DOTALL ) . findall ( Ooo )
 i1 = re . compile ( 'class="poster">.+?src="(.+?)".+?href="(.+?)">(.+?)</a></div>' , re . DOTALL ) . findall ( str ( o0oOoO00o ) )
 for i11 , url , i1111 in i1 :
  i11 = i11 . replace ( 'w90' , 'w300_and_h450_bestv2' )
  i1111 = i1111 . replace ( '&#8217;' , '' ) . replace ( '#038;' , '' ) . replace ( '\\xc3\\xa9' , 'e' ) . replace ( '&#8211;' , '' )
  I11 ( '[B][COLOR white]%s[/COLOR][/B]' % i1111 , url , 100 , i11 , Oo , '' )
 xbmc . executebuiltin ( 'Container.SetViewMode(50)' )
 if 68 - 68: I1i1iI1i . o0o0Oo0oooo0 . i11iIiiIii
 if 40 - 40: o0o0Oo0oooo0 . I1i1iI1i . O0oo0OO0 . i1IIi
 if 33 - 33: IIIi1i1I + iii1I1I % i11iIiiIii . Ooooo - O00oOoOoO0o0O
def O00oooo0O ( ) :
 IiI1i11iii1 = xbmc . Keyboard ( '' , 'Search' )
 IiI1i11iii1 . doModal ( )
 if ( IiI1i11iii1 . isConfirmed ( ) ) :
  oo0Oo00Oo0 = IiI1i11iii1 . getText ( ) . replace ( ' ' , '+' )
  oOOoo00O0O = iIiiiI + '/?s=' + oo0Oo00Oo0
  oOOO00o ( oOOoo00O0O )
  if 97 - 97: oO0 % oO0 + iii1I1I * I1Ii
def oOOO00o ( url ) :
 Ooo = open_url ( url ) . content
 o0oOoO00o = re . compile ( '<h1><a href="(.+?)".+?>(.+?)</a></h1>' , re . DOTALL ) . findall ( Ooo )
 for url , i1111 in o0oOoO00o :
  iiI11 = len ( o0oOoO00o )
  i1111 = i1111 . replace ( '&#8217;' , '' ) . replace ( ' HD' , '' )
  if Iii1ii1II11i == 'true' :
   OOooO ( '[B][COLOR white]%s[/COLOR][/B]' % i1111 , url , 100 , O0O , iiI11 )
  else :
   I11 ( '[B][COLOR white]%s[/COLOR][/B]' % i1111 , url , 100 , icon , Oo , '' )
 II111iiii ( 'movies' , 'movie-view' )
 if 54 - 54: oO0 + IiIi1Iii1I1 / I1Ii
def I11 ( name , url , mode , iconimage , fanart , description ) :
 IIII = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&iconimage=" + urllib . quote_plus ( iconimage ) + "&description=" + urllib . quote_plus ( description )
 Ii1I = True
 Oo0o0 = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 Oo0o0 . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 Oo0o0 . setProperty ( 'fanart_image' , fanart )
 if mode == 100 :
  Oo0o0 . setProperty ( "IsPlayable" , "true" )
  Ii1I = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = IIII , listitem = Oo0o0 , isFolder = False )
 else :
  Ii1I = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = IIII , listitem = Oo0o0 , isFolder = True )
 return Ii1I
 if 49 - 49: o0o0Oo0oooo0 % IIIi1i1I + i1IIi . O00oOoOoO0o0O % I1111
def OOooO ( name , url , mode , iconimage , itemcount ) :
 name = name . replace ( '[B][COLOR white]' , '' ) . replace ( '[/COLOR][/B]' , '' )
 I1i1iii = name . partition ( '(' )
 i1iiI11I = ""
 iiii = ""
 if len ( I1i1iii ) > 0 :
  i1iiI11I = I1i1iii [ 0 ]
  iiii = I1i1iii [ 2 ] . partition ( ')' )
 if len ( iiii ) > 0 :
  iiii = iiii [ 0 ]
 oO0o0O0OOOoo0 = eval ( base64 . b64decode ( 'bWV0YWhhbmRsZXJzLk1ldGFEYXRhKHRtZGJfYXBpX2tleT0iMzZjMWM1OWYwNTI0YTYzZTc3MmI5MGMzNzc4ZmIwOTciKQ==' ) )
 IiIiiI = oO0o0O0OOOoo0 . get_meta ( 'movie' , name = i1iiI11I , year = iiii )
 if IiIiiI [ 'cover_url' ] == '' :
  try :
   IiIiiI [ 'cover_url' ] = iconimage
  except :
   IiIiiI [ 'cover_url' ] = iconimage
 name = '[B][COLOR white]' + name + '[/COLOR][/B]'
 IiIiiI [ 'title' ] = name
 IIII = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&iconimage=" + urllib . quote_plus ( iconimage )
 Ii1I = True
 Oo0o0 = xbmcgui . ListItem ( name , iconImage = IiIiiI [ 'cover_url' ] , thumbnailImage = IiIiiI [ 'cover_url' ] )
 Oo0o0 . setInfo ( type = "Video" , infoLabels = IiIiiI )
 I1I = [ ]
 I1I . append ( ( 'Movie Information' , 'XBMC.Action(Info)' ) )
 if IiIiiI [ 'trailer' ] :
  I1I . append ( ( 'Play Trailer' , 'XBMC.RunPlugin(%s)' % i1iII1IiiIiI1 . build_plugin_url ( { 'mode' : 99 , 'url' : IiIiiI [ 'trailer' ] } ) ) )
 Oo0o0 . addContextMenuItems ( I1I , replaceItems = False )
 if not IiIiiI [ 'backdrop_url' ] == '' :
  Oo0o0 . setProperty ( 'fanart_image' , IiIiiI [ 'backdrop_url' ] )
 else : Oo0o0 . setProperty ( 'fanart_image' , Oo )
 if mode == 100 :
  Oo0o0 . setProperty ( "IsPlayable" , "true" )
  Ii1I = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = IIII , listitem = Oo0o0 , isFolder = False , totalItems = itemcount )
 else :
  Ii1I = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = IIII , listitem = Oo0o0 , isFolder = True , totalItems = itemcount )
 return Ii1I
 if 80 - 80: I1i1iI1i - Oo0ooO0oo0oO
def OOO00 ( title , message , icon ) :
 i1iII1IiiIiI1 . show_small_popup ( i1iII1IiiIiI1 . get_name ( ) , message . title ( ) , 5000 , icon )
 return
 if 21 - 21: OoooooooOO - OoooooooOO
def II111iiii ( content , viewType ) :
 if content :
  if 8 - 8: I1i1iI1i
  if 60 - 60: oO0 / oO0
  xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , content )
 if i1iII1IiiIiI1 . get_setting ( 'auto-view' ) == 'true' :
  if 46 - 46: IIIi1i1I * I1I1i1 - Oo0ooO0oo0oO * o0o0Oo0oooo0 - O0O0O0O00OooO
  print i1iII1IiiIiI1 . get_setting ( viewType )
  if i1iII1IiiIiI1 . get_setting ( viewType ) == 'Info' :
   oo0 = '504'
  elif i1iII1IiiIiI1 . get_setting ( viewType ) == 'Info2' :
   oo0 = '503'
  elif i1iII1IiiIiI1 . get_setting ( viewType ) == 'Info3' :
   oo0 = '515'
  elif i1iII1IiiIiI1 . get_setting ( viewType ) == 'Fanart' :
   oo0 = '508'
  elif i1iII1IiiIiI1 . get_setting ( viewType ) == 'Poster Wrap' :
   oo0 = '501'
  elif i1iII1IiiIiI1 . get_setting ( viewType ) == 'Big List' :
   oo0 = '51'
  elif i1iII1IiiIiI1 . get_setting ( viewType ) == 'Low List' :
   oo0 = '724'
  elif i1iII1IiiIiI1 . get_setting ( viewType ) == 'List' :
   oo0 = '50'
  elif i1iII1IiiIiI1 . get_setting ( viewType ) == 'Default Menu View' :
   oo0 = i1iII1IiiIiI1 . get_setting ( 'default-view1' )
  elif i1iII1IiiIiI1 . get_setting ( viewType ) == 'Default TV Shows View' :
   oo0 = i1iII1IiiIiI1 . get_setting ( 'default-view2' )
  elif i1iII1IiiIiI1 . get_setting ( viewType ) == 'Default Episodes View' :
   oo0 = i1iII1IiiIiI1 . get_setting ( 'default-view3' )
  elif i1iII1IiiIiI1 . get_setting ( viewType ) == 'Default Movies View' :
   oo0 = i1iII1IiiIiI1 . get_setting ( 'default-view4' )
  elif i1iII1IiiIiI1 . get_setting ( viewType ) == 'Default Docs View' :
   oo0 = i1iII1IiiIiI1 . get_setting ( 'default-view5' )
  elif i1iII1IiiIiI1 . get_setting ( viewType ) == 'Default Cartoons View' :
   oo0 = i1iII1IiiIiI1 . get_setting ( 'default-view6' )
  elif i1iII1IiiIiI1 . get_setting ( viewType ) == 'Default Anime View' :
   oo0 = i1iII1IiiIiI1 . get_setting ( 'default-view7' )
   if 57 - 57: I1I1i1 . I1I1i1
  print viewType
  print oo0
  if 95 - 95: O0 + Oo0ooO0oo0oO . iii1I1I / O0
  xbmc . executebuiltin ( "Container.SetViewMode(%s)" % ( int ( oo0 ) ) )
  if 97 - 97: Ooooo - I1I1i1 * i11iIiiIii / I1i1iI1i % O0O0O0O00OooO - OoooooooOO
 xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_UNSORTED )
 xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_LABEL )
 xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_VIDEO_RATING )
 xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_DATE )
 xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_PROGRAM_COUNT )
 xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_VIDEO_RUNTIME )
 xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_GENRE )
 xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_MPAA_RATING )
 if 59 - 59: O0 + O00oOoOoO0o0O + IiIi1Iii1I1 % O00oOoOoO0o0O
def o0OOoo0OO0OOO ( url ) :
 i1iII1IiiIiI1 . log ( 'Play Trailer %s' % url )
 OOO00 ( i1iII1IiiIiI1 . get_name ( ) , 'fetching trailer' , i1iII1IiiIiI1 . get_icon ( ) )
 xbmc . executebuiltin ( "PlayMedia(%s)" % url )
 if 19 - 19: o0o0Oo0oooo0 % i1IIi % II
def oo0OooOOo0 ( url ) :
 Ooo = open_url ( url ) . content
 url = re . compile ( '<iframe src="(.+?)"' , re . DOTALL ) . findall ( Ooo ) [ 0 ]
 try :
  o0O = urlresolver . resolve ( url )
  Oo0o0 = xbmcgui . ListItem ( i1111 , iconImage = "DefaultVideo.png" , thumbnailImage = O00oO )
  Oo0o0 . setInfo ( type = "Video" , infoLabels = { "Title" : I11i1I1I } )
  Oo0o0 . setProperty ( "IsPlayable" , "true" )
  Oo0o0 . setPath ( o0O )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , Oo0o0 )
 except : pass
 if 83 - 83: I1111 / Ooooo
def iIIIIii1 ( ) :
 oo000OO00Oo = [ ]
 O0OOO0OOoO0O = sys . argv [ 2 ]
 if len ( O0OOO0OOoO0O ) >= 2 :
  O00Oo000ooO0 = sys . argv [ 2 ]
  OoO0O00 = O00Oo000ooO0 . replace ( '?' , '' )
  if ( O00Oo000ooO0 [ len ( O00Oo000ooO0 ) - 1 ] == '/' ) :
   O00Oo000ooO0 = O00Oo000ooO0 [ 0 : len ( O00Oo000ooO0 ) - 2 ]
  IIiII = OoO0O00 . split ( '&' )
  oo000OO00Oo = { }
  for o0 in range ( len ( IIiII ) ) :
   ooOooo000oOO = { }
   ooOooo000oOO = IIiII [ o0 ] . split ( '=' )
   if ( len ( ooOooo000oOO ) ) == 2 :
    oo000OO00Oo [ ooOooo000oOO [ 0 ] ] = ooOooo000oOO [ 1 ]
    if 59 - 59: iii1I1I + OoooooooOO * I1i1iI1i + i1IIi
 return oo000OO00Oo
 if 58 - 58: iii1I1I * I1I1i1 * I1111 / I1I1i1
O00Oo000ooO0 = iIIIIii1 ( )
oOOoo00O0O = None
i1111 = None
O00oO = None
oO0o0OOOO = None
O0O0OoOO0 = None
I11i1I1I = None
if 10 - 10: OoooooooOO % iIii1I11I1II1
if 54 - 54: O0O0O0O00OooO - iii1I1I % I1i1iI1i % oO0 % iIii1I11I1II1 + Ooooo
try :
 oOOoo00O0O = urllib . unquote_plus ( O00Oo000ooO0 [ "url" ] )
except :
 pass
try :
 i1111 = urllib . unquote_plus ( O00Oo000ooO0 [ "name" ] )
except :
 pass
try :
 O00oO = urllib . unquote_plus ( O00Oo000ooO0 [ "iconimage" ] )
except :
 pass
try :
 oO0o0OOOO = int ( O00Oo000ooO0 [ "mode" ] )
except :
 pass
try :
 O0O0OoOO0 = urllib . unquote_plus ( O00Oo000ooO0 [ "fanart" ] )
except :
 pass
try :
 I11i1I1I = urllib . unquote_plus ( O00Oo000ooO0 [ "description" ] )
except :
 pass
 if 15 - 15: oO0 * Ooooo * O0oo0OO0 % i11iIiiIii % I1i1iI1i - I1I1i1
 if 68 - 68: O0O0O0O00OooO % i1IIi . IiIi1Iii1I1 . I1111
print str ( I1ii11iIi11i ) + ': ' + str ( I1IiI )
print "Mode: " + str ( oO0o0OOOO )
print "URL: " + str ( oOOoo00O0O )
print "Name: " + str ( i1111 )
print "IconImage: " + str ( O00oO )
if 92 - 92: I1Ii . O0O0O0O00OooO
if 31 - 31: O0O0O0O00OooO . I1i1iI1i / O0
if oO0o0OOOO == None : OoI1Ii11I1Ii1i ( )
elif oO0o0OOOO == 5 : OOoOoo00oo ( oOOoo00O0O )
elif oO0o0OOOO == 6 : O00oooo0O ( )
elif oO0o0OOOO == 7 : oOoO ( oOOoo00O0O )
elif oO0o0OOOO == 99 : o0OOoo0OO0OOO ( oOOoo00O0O )
elif oO0o0OOOO == 100 : oo0OooOOo0 ( oOOoo00O0O )
if 89 - 89: I1i1iI1i
xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')